package mock;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.mock.Mock;
import org.unitils.mock.MockUnitils;
import org.unitils.mock.PartialMock;
import org.unitils.mock.annotation.Dummy;
import org.unitils.mock.core.proxy.ProxyInvocation;
import org.unitils.mock.mockbehavior.MockBehavior;

import java.util.ArrayList;
import java.util.List;

import static org.unitils.reflectionassert.ReflectionAssert.assertLenientEquals;
import static org.unitils.mock.ArgumentMatchers.*;

/**
 * @author Sergey Ponomarev
 */
@RunWith(UnitilsJUnit4TestClassRunner.class)
public final class UnitilsMockExample {

    /**
     * Mock objects are wrapped inside a control object, which you can use to define behavior and invoke assert
     * statements. Simply declare the mock as a field of your test, you don't have to instantiate it yourself.
     */
    private Mock<List> mockedList;  //??? ?? - mock-?????? (????????: List - ??? ?????????)

    private List list;

    PartialMock<ArrayList> partialMockedList;

    @Dummy
    private Object o, notO;

    @Before
    public void setUp() {
        list = mockedList.getMock();
    }

    /**
     * mock-?????? ????? ?????????? ????? ?????? ??? ???????, ????? ????? ?? ????? ????????? ????? ?????? ??????? ???
     * ??????????? ??? ? mock-???????
     */
    @Test
    public void testBehavior() {
        list.add("one");
        list.clear();
        // ?????????, ???? ?? ??????? ?????? add ? ?????????? "one" ? clear
        mockedList.assertInvoked().add("one");
        mockedList.assertInvoked().clear();
    }

    /**
     * ?? ????????? ??? ?????? mock ??????? ?????????? default'??? ????????, false ??? boolean, 0 ??? int,
     * ?????? ?????????, null ??? ????????? ????????.
     */
    @Test(expected = RuntimeException.class)
    public void testStub() {
        // stub'???
        mockedList.returns("first").get(0);
        mockedList.raises(RuntimeException.class).get(1);

        // ??????? "first"
        assertLenientEquals("first", list.get(0));
        // ??????? "null" ??? get(999) ?? ??? ?????????
        assertLenientEquals(null, list.get(999));

        // ??????? RuntimeException
        list.get(1);
    }

    /**
     * you can specify custom behavior
     */
    @Test
    public void testPerforms() {
        mockedList.performs(new MockBehavior() {
            public Object execute(ProxyInvocation mockInvocation) {
                System.out.println(mockInvocation.getLineNumber());
                return null;
            }
        }).add(0);
        list.add(0);
    }


    @Test
    public void testSequence() {
        list.add(0);
        list.add(1);
        list.add(2);
        list.size();

        mockedList.assertInvokedInSequence().add(0);
        mockedList.assertInvokedInSequence().add(1);
        mockedList.assertInvokedInSequence().add(2);
    }

    /**
     * ?????????? ????? ? ?????????? ???????????????? ???????
     */
    @Test
    public void testArgMatches() {
        mockedList.returns(true).contains(notNull(Number.class)); // Matches with any not-null object of type User
        mockedList.returns(false).contains(isNull(Number.class)); // The argument must be null
        assertTrue(list.contains(1));
        assertFalse(list.contains(null));

        list.contains(o);
        mockedList.assertInvoked().contains(same(o)); // The argument must refer to alert1 instance
    }

    /**
     * ?? ?????? ??????? mock-??????, (?????? spy-??????) ??????? ????? ???????????? ???????? ?????? ??? ??????? ??????.
     * ?????????? ???? ??????????? ??? ??????, ??? ??????? ????????? mock-??????.
     */
    @Test(expected = IndexOutOfBoundsException.class)
    public void testPartialMocks() {
        List pmList = partialMockedList.getMock();
        partialMockedList.returns("ololo").get(1);
        assertEquals("ololo", pmList.get(1));
        pmList.get(999);
    }

    @After
    public void tearDown() {
        MockUnitils.assertNoMoreInvocations();
    }

}
